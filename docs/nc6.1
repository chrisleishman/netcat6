.TH NC6 1 
.SH NAME
nc6 \- TCP/IP swiss army knife
.SH SYNOPSIS
.B nc6
.I "[options...] hostname port"
.br
.B nc6
.I "-l -p port [-s addr] [options...] [hostname] [port]"
.SH "DESCRIPTION"
.B netcat6
is a simple unix utility which reads and writes data across network
connections, using the TCP or UDP protocol over IPv4 or IPv6 networks.
It is designed to be a reliable "back-end" tool that can be used directly or
easily driven by other programs and scripts.  At the same time, it is a
feature-rich network debugging and exploration tool, since it can create
almost any kind of connection you would need and has several interesting
built-in capabilities. 
.B netcat6
, or "nc6" as the actual program is named, should have been supplied long ago
as another one of those cryptic but standard Unix tools.
.P
In the simplest usage, "nc6 host port" creates a TCP connection to the
given port on the given target host.  Your standard input is then sent
to the host, and anything that comes back across the connection is
sent to your standard output.  This continues indefinitely, until the
network side of the connection shuts down.  Note that this behaviour is
different from most other applications which shut everything down and
exit after an end-of-file on the standard input (though this style of
operation can easily be enabled).
.P
.B netcat6 
can also function as a server, by listening for inbound
connections on arbitrary ports and then doing the same reading and
writing.  With minor limitations, 
.B netcat6 
doesn't really care if it runs in "client" or "server" mode -- it still 
shovels data back and forth until there isn't any more left.  In this
manual page, these two working modes are referred as "connect mode" and 
"listen mode", respectively.
.SH OPTIONS
.TP 13
.I \-4
Forces the use of IPv4. 
.TP 13
.I \-6
Forces the use of IPv6 and inhibites the use IPV4-mapped addresses.
.TP 13
.I \-d
Enables the SO_REUSEADDR socket option (this is only useful in listen mode).
.TP 13
.I \-h, --help
Display a brief help listing.
.TP 13
.I \-l, --listen
Selects listen mode (for inbound connects).
.TP 13
.I \-n
Disables DNS queries - you'll have to use numeric IP address 
instead of hostnames.
.TP 13
.I \-p, --port=PORT
Sets the port number for the local endpoint of the connection.
.TP 13
.I \-q, --hold-timeouts=SEC1[:SEC2]
Sets the hold timeouts (see "timeouts" section).  Specifing just one value
will set the hold timeout on the local endpoint, specifing a second value will
set the hold timeout on the remote endpoint as well.  Either value can be '0'
(for instant timeout) or '-' (for no hold timeout, eg. infinite hold).
.TP 13
.I \-s, --address=ADDRESS
Sets the source address for the local endpoint of the connection.
.TP 13
.I \-u, --udp
With this option set, 
.B netcat6 
will use UDP as the transport protocol (TCP is the default).
.TP 13
.I \-v
Enable verbose mode.  This gives some basic information about what 
.B netcat6
is doing.  Use it twice for extra verbosity.
.TP 13
.I \-w, --timeout=SECONDS
Timeout for network connects and accepts.
.TP 13
.I \-x, --transfer
File transfer mode (see "file transfer" section).
.TP 13
.I \--buffer-size=BYTES
Set the buffer size for the remote endpoint (network receives).
.TP 13
.I \--mtu=BYTES
Set the Maximum Transmition Unit for the remote endpoint (network transmits).
This is only really useful for datagram protocols like UDP.
.TP 13
.I \--nru=BYTES
Set the miNimum Receive Unit for the remote endpoint (network receives).  Note
that this does not mean that every network read will get the specified number
of bytes, only that nc6 MUST be able to receive at least that amount of data
when a read is done.  This is only really useful for datagram protocols like
UDP.
.TP 13
.I \--half-close
Properly handle (and send) TCP half closes for protocols that support them
(eg. TCP).
.SH UDP
UDP support in 
.B netcat6
works very well in both connect and in listen mode.  When using UDP in listen
mode
.B netcat6
accepts UDP packets from any source that maches the optional address and/or
port specified (if it was specified).  However, once the first packet is
received,
.B netcat6
will only receive packets from that client in future.  This is done by
putting the UDP socket into "connected" state (see udp(4) and connect(2)).
Packets from other sources are discarded by the kernel and an ICMP unreachable 
response is sent.
.P
When connecting to a remote host using UDP, nc6 will report that the
connection is open regardless of whether a remote server is listening.  This
is because UDP is a connectionless protocol, and hence no connection
establishment is actually required.  However, after sending the first packet
of data, a server may reply with an ICMP unreachable response causing nc6 to
exit with a 'Connection refused' error message.
.SH TIMEOUTS
.B netcat6
currently implements a connect/accept timeout, and hold timeouts on both the
remote and local endpoints.
.P
The connect/accept timeout is optional and is specified with the -w or
--timeout option.  If a connection cannot be established within the specified
time, nc6 will exit with a non-zero exit status.  If the option is not
specified, nc6 will wait forever when listening for new connections
(in listen mode), and will use the standard operating system timeout when
trying to connect to remote systems.  Note that the connect timeout is
essentially ignored when creating UDP connections to a remote server, as UDP
is a connectionless protocol.
.P
The hold timeouts specify how long the connection should be held open after a
given endpoint can no longer be read from.  For example, setting the hold time
of the local endpoint to 5 would cause the connection to be closed 5 seconds
after stdin is closed (eg. by using ^D to send EOF).  By default, the hold
timeout is disabled for the local endpoint (essentially an 'infinite'
timeout), and the hold timeout is set to 0 for the remote endpoint (an
\'instant' timeout).  This means that nc6 closes it's connection immediately
when the read from the remote server is closed (also, see 'HALF CLOSE'
section).
.SH FILE TRANSFER
.SH HALF CLOSE
.SH COPYRIGHT
GPL. 
.SH AUTHORS
.LP
Mauro Tortonesi <mauro@ferrara.linux.it>
.LP
Chris Leishman <chris@leishman.org>
.P 
The original netcat was written by a guy we know as
the Hobbit <hobbit@avian.org>.
